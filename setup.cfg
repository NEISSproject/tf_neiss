[metadata]
name = tf_neiss
version = attr: tf_neiss.__version__
url = https://None/dboeckenhoff/tf_neiss
author = Daniel BÃ¶ckenhoff
author_email = dboe@ipp.mpg.de
# find the full list of possible classifiers at https://pypi.org/classifiers/
classifiers = 
    Development Status :: 3 - Alpha
    License :: OSI Approved :: MIT License
    Programming Language :: Python
    Programming Language :: Python :: 2.7
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.2
    Programming Language :: Python :: 3.3
    Programming Language :: Python :: 3.4
    Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
license = MIT License
license_files = LICENSE.rst
description = Tensorflow toolkit for NEISS collaboration and partners
long_description = file: README.rst, LICENSE.rst
long_description_content_type = text/x-rst
keywords = machine learning, tensorflow, artificial neural networks, supervised learning
install_requires = 
    pathlib2;python_version<"3.0"
    pathlib;python_version>="3.0"
    pandas
    scipy
    Pillow
    scikit-image
    numpy==1.17.4
    shapely
    descartes
    PyPDF2
    gensim
project_urls =
    Documentation = https://None/dboeckenhoff/tf_neiss
    Source = https://None/dboeckenhoff/tf_neiss
tests_require =
    doctest
    unittest
    nose
python_requires = >=2.7

[bumpversion]
commit = True
tag = True

[bumpversion:file:tf_neiss/__init__.py]
search = __version__ = '{current_version}'
replace = __version__ = '{new_version}'

[bdist_wheel]
universal = 1

[coverage:report]
show_missing = true
exclude_lines =
    pragma: no cover
    if False
    # @abc.abstractmethod
    # @abc.abstractproperty
    # raise NotImplementedError
    # return NotImplemented
    # except ImportError

[flake8]
max-line-length = 99
doctests = True
exclude =  .git, .eggs, __pycache__, tests/, docs/, build/, dist/
